---
- name: Deploy Kubernetes
  hosts: localhost, nodes
  become: true

  tasks:
    - name: clear docker sources
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /etc/apt/sources.list.d/docker.list
        - /usr/share/keyrings/docker-archive-keyring.gpg
        - /usr/share/keyrings/docker.asc
        - /etc/apt/keyrings/docker.asc

    - name: Install additional packages
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
    
    - name: Add docker repo
      shell: |
        apt-get update
        apt-get install ca-certificates curl
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc

        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          tee /etc/apt/sources.list.d/docker.list > /dev/null
        apt-get update

    - name: Install containerd.io package
      apt:
        name: containerd.io
        state: present
    
    - name: Store containerd config
      command: containerd config default > /etc/containerd/config.toml

    - name: Restart containerd service
      systemd:
        name: containerd
        state: restarted

    # - name: Install Kubernetes dependencies
    #   apt:
    #     name: "{{ item }}"
    #     state: present
    #   with_items:
    #     - kubelet
    #     - kubeadm
    #     - kubectl

    # - name: Initialize Kubernetes cluster
    #   command: kubeadm init

    # - name: Copy kubeconfig file
    #   command: cp /etc/kubernetes/admin.conf $HOME/.kube/config
    #   args:
    #     creates: $HOME/.kube/config

    # - name: Install network plugin
    #   command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

    # - name: Join worker nodes to the cluster
    #   command: kubeadm join <master-ip>:<master-port> --token <token> --discovery-token-ca-cert-hash <hash>
    #   when: inventory_hostname != 'master-node'